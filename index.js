const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const path = require('path');
const fs = require('fs');

const botToken = '7793184238:AAFev9VQeom_69o_uazb3EFMa6pNZiK3Rtc';
const adminChatId = '533006515';
const apiKey = '6HVBG0X-A2749H1-GMH0MRS-GM9RQ7V';  // API –∫–ª—é—á –¥–ª—è NOWPayments
const bot = new TelegramBot(botToken, { polling: true });
const courseFilePath = path.resolve(__dirname, '–∫—É—Ä—Å.rar');  // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—É—Ä—Å–∞
const usedPaymentsFilePath = path.resolve(__dirname, 'usedPayments.json');

const nowPaymentsUrl = 'https://api.nowpayments.io/v1/invoice'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
const payments = new Map();

async function createPaymentLink(amount, chatId) {
     try {
          const fixedAmount = parseFloat(amount.toFixed(2));
          const response = await axios.post(
               nowPaymentsUrl,
               {
                    price_amount: fixedAmount,
                    price_currency: 'trx',
                    pay_currency: 'trx',
                    order_id: `test_${Date.now()}`,
                    order_description: '–û–ø–ª–∞—Ç–∞ –∑–∞ –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç',
               },
               {
                    headers: {
                         'x-api-key': apiKey,
                         'Content-Type': 'application/json',
                    },
               }
          );

          const paymentUrl = response.data.invoice_url; // –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
          const paymentId = response.data.id;
          payments.set(paymentId, { chatId, checking: true });
          return paymentUrl;
     } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error.response?.data || error.message);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
     }
}

bot.on('callback_query', async (query) => {
     const chatId = query.message.chat.id;
     const action = query.data;

     if (action === 'buy') {
          payments.set(chatId, Date.now());

          try {
               const paymentUrl = await createPaymentLink(49, chatId);

               bot.sendMessage(chatId, `‚ùóÔ∏è –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ 49 TRX. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:`);

               bot.sendMessage(chatId, `üî• –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${paymentUrl}`);

               bot.sendMessage(chatId, 'üí¨ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –æ–ø–ª–∞—Ç–æ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.', {
                    reply_markup: {
                         inline_keyboard: [
                              [{ text: '–ü–æ–º–æ—á—å —Å –æ–ø–ª–∞—Ç–æ–π?', url: 'https://t.me/iiiiiiiiiii1111iii' }]
                         ]
                    }
               });
          } catch (error) {
               bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          }
     } else if (action === 'details') {
          bot.sendMessage(chatId, 'üí° –ù–∞ –Ω–∞—à–µ–º –∫—É—Ä—Å–µ —Ç—ã:\n‚úÖ –£–∑–Ω–∞–µ—à—å –æ—Å–Ω–æ–≤—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n‚úÖ –û—Å–≤–æ–∏—à—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.\n‚úÖ –ü–æ–ª—É—á–∏—à—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞!\n\nüöÄ –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å, –Ω–∞–∂–º–∏ "–ö—É–ø–∏—Ç—å –∫—É—Ä—Å"!');

          bot.sendVideo(chatId, path.resolve(__dirname, 'motivation.mp4'))
               .then(() => {
                    bot.sendMessage(chatId, 'üî• –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∫—É—Ä—Å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!', {
                         reply_markup: {
                              inline_keyboard: [
                                   [{ text: '–ö—É–ø–∏—Ç—å –∫—É—Ä—Å –∏ —Å—Ç–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç! üí∞', callback_data: 'buy' }]
                              ]
                         }
                    });
               })
               .catch((error) => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:', error);
                    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ. ‚ö†Ô∏è');
               });
     } else if (action === 'course_details') {
          bot.sendMessage(chatId, 'üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ:\n- –ö—É—Ä—Å –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è 10 –º–æ–¥—É–ª–µ–π.\n- –í –∫–∞–∂–¥–æ–º –º–æ–¥—É–ª–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è.\n- –°—Ç–∞—Ä—Ç—É–µ–º —Å –æ—Å–Ω–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏.\n\n–ù–∞—á–Ω–∏ –æ–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞—Å–∫—Ä–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!');
     } else if (action === 'info') {
          bot.sendMessage(chatId, 'üéÅ –ü–æ–ª—É—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º, –∞ —Ç–∞–∫–∂–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n–ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å ‚Äî —Å–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!');
     }
});

const checkPaymentStatus = async (paymentId) => {
     const url = `https://api.nowpayments.io/v1/payment/${paymentId}`;

     try {
          const response = await axios.get(url, {
               headers: {
                    "x-api-key": apiKey,
               }
          });

          return response.data.payment_status

     } catch (error) {
          console.error('Error checking payment status:', error);
          if (error.response) {
               console.log('API Response:', error.response.data);
          }
     }
};

const readUsedPayments = () => {
     try {
          const data = fs.readFileSync(usedPaymentsFilePath, 'utf8');
          return JSON.parse(data);
     } catch (error) {
          return [];
     }
};

const writeUsedPayments = (paymentId) => {
     const usedPayments = readUsedPayments();
     usedPayments.push(paymentId);
     fs.writeFileSync(usedPaymentsFilePath, JSON.stringify(usedPayments), 'utf8');
};

bot.on('message', async (msg) => {
     const chatId = msg.chat.id;
     const text = msg.text.trim();

     try {
          if (!text) {
               bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π payment_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.');
               return;
          }

          const usedPayments = readUsedPayments();
          if (usedPayments.includes(text)) {
               bot.sendMessage(chatId, '‚ö†Ô∏è –≠—Ç–æ—Ç payment_id —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ö—É—Ä—Å —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.');
               return;
          }

          const status = await checkPaymentStatus(text);

          if (status !== 'finished' && text !== `/start`) {
               bot.sendMessage(chatId, '‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π payment_id.');
               return;
          }

          if (status === 'finished') {

               payments.delete(chatId);
               bot.sendMessage(chatId, '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞–º –∫—É—Ä—Å.');
               bot.sendDocument(chatId, courseFilePath)
                    .then(() => {
                         bot.sendMessage(chatId, 'üî• –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏.');

                         writeUsedPayments(text);
                    })
                    .catch((err) => {
                         console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É—Ä—Å–∞:', err);
                         bot.sendMessage(chatId, '‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É—Ä—Å–∞.');
                    });

               bot.sendMessage(adminChatId, `üí∞ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}. –ö—É—Ä—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
          }
     } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
          bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
     }
});

const botStart = async () => {
     bot.onText(/\/start/, (msg) => {
          const chatId = msg.chat.id;

          const options = {
               reply_markup: {
                    inline_keyboard: [
                         [{ text: '–ö—É–ø–∏—Ç—å –∫—É—Ä—Å –ü–û –°–£–ü–ü–ï–† –¶–ï–ù–ï 49 TRX! üí∞', callback_data: 'buy' }],
                         [{ text: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏ –Ω–∞—à–µ–º –∫—É—Ä—Å–µ üìö', callback_data: 'details' }],
                         [{ text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ üîç', callback_data: 'course_details' }],
                         [{ text: '–ù–µ–º–Ω–æ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π üéÅ', callback_data: 'info' }],
                    ],
               },
          };

          bot.sendMessage(chatId, 'üöÄ –ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–∞ –ø–æ—Ä–æ–≥–µ –≤–µ–ª–∏–∫–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è! üí∏ –í –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –µ—Å—Ç—å –±–µ–∑–±—Ä–µ–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã. –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å? –¢–æ–≥–¥–∞ —Ç–µ–±–µ —Å—é–¥–∞! üåü\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', options);
     });
};

botStart();